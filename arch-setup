#!/bin/bash

# Version: v0.5

set -e

# Check if a command is available
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check if a package is installed
package_installed() {
  pacman -Q "$1" >/dev/null 2>&1
}

# Check if a directory exists
directory_exists() {
  [ -d "$1" ]
}

install_basic_packages() {
  dependencies=("base-devel" "git" "gdb" "wget" "curl" "go" "sed" "net-tools" "neovim" "lsd" "mpv" "expect" "pwndbg" "peda" "gef" "axel" "pass-otp" "youtube-dl" "yt-dlp" "obs-studio" "jq" "bat" "fzf" "unzip" "docker" "aws-cli-v2" "ufw" "firefox" "wireshark-qt" "jre-openjdk" "jdk-openjdk" "python" "python-pip" "bpython" "code" "keepassxc" "xdotool" "macchanger" "translate-shell")

  for dependency in "${dependencies[@]}"; do
      if ! command_exists "$dependency"; then
          if ! package_installed "$dependency"; then
              sudo pacman -S --disable-download-timeout --noconfirm "$dependency"
          fi
      fi
  done
}

install_github_tools() {
  # Scripts
  scripts=(
    "fshare=https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/bin/fshare"
    "emofzf=https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/bin/emofzf"
    "myman=https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/bin/myman"
    "selftar=https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/bin/selftar"
    "ytplay=https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/bin/ytplay"
    "ytfzf=https://raw.githubusercontent.com/pystardust/ytfzf/5cd15046127597ac6230c1f021dc9a5cdfff79d0/ytfzf"
    "passrofi=https://raw.githubusercontent.com/FlareXes/passrofi/main/passrofi"
    "check-breach=https://raw.githubusercontent.com/FlareXes/check-breach/main/check-breach"
    "randx=https://github.com/FlareXes/randx/raw/master/bin/randx_unix"
  )

  # Tools
  tools=(
    "cryptfile=https://github.com/FlareXes/cryptfile.git"
    "offsync=https://github.com/FlareXes/offsync.git"
    "watodo=https://github.com/FlareXes/watodo.git"
    "yt-like=https://github.com/FlareXes/yt-like.git"
  )

  for script in "${scripts[@]}"; do
    name="${script%=*}"
    url="${script#*=}"
    if ! command_exists "$name"; then
      sudo wget "$url" -O "/usr/local/bin/$name"
      sudo chmod +x "/usr/local/bin/$name"
    fi
  done

  for tool in "${tools[@]}"; do
    name="${tool%=*}"
    url="${tool#*=}"
    temp_dir=$(mktemp -d -t $name.XXXXXXXXXX)
    if ! command_exists "$name"; then
      git clone "$url" "$temp_dir"
      cd "$temp_dir" && chmod +x setup.sh && ./setup.sh
    fi
  done
}

install_hacking_tools() {
  dependencies=("hashid" "hashcat" "johnny" "feroxbuster" "nmap" "seclists" "whois" "binwalk" "burpsuite")    
  for dependency in "${dependencies[@]}"; do
      if ! command_exists "$dependency"; then
          if ! package_installed "$dependency"; then
              sudo pacman -S --noconfirm "$dependency"
          fi
      fi
  done
}

install_yay_packages() {
  yay_dependencies=("brave-bin" "librewolf-bin" "onlyoffice-bin" "appimagelauncher" "portmaster-stub-bin" "timeshift" "devour" "pup" "mpv-thumbnail-script")

  for dependency in "${yay_dependencies[@]}"; do
    if ! command_exists "$dependency"; then
      if ! package_installed "$dependency"; then
        yay -S --noconfirm "$dependency"
      fi
    fi
  done
}

install_snap_packages() {
  if ! command_exists "pycharm-professional"; then
      sudo snap install pycharm-professional --classic
  fi
}

install_from_aur() {
  if ! command_exists "yay"; then
    git clone https://aur.archlinux.org/yay.git /tmp/yay
    cd /tmp/yay && makepkg -sirc --noconfirm
  fi

  if ! command_exists "snap"; then
    git clone https://aur.archlinux.org/snapd.git /tmp/snapd
    cd /tmp/snapd && makepkg -sirc --noconfirm
  fi
}

setup_blackarch_repo() {
  wget https://blackarch.org/strap.sh -O /tmp/strap.sh
  chmod +x /tmp/strap.sh && cd /tmp/ && sudo ./strap.sh
}

enable_systemd_services() {
  # Snap
  sudo systemctl enable --now snapd.socket
  sudo ln -s /var/lib/snapd/snap /snap

  # Docker
  sudo systemctl enable --now docker.service
  sudo systemctl start docker.service
  sudo systemctl restart docker
  sudo usermod -aG docker $USER
  sudo docker run hello-world

  # Ufw
  sudo systemctl enable --now ufw
  sudo systemctl start ufw
  sudo ufw default allow outgoing
  sudo ufw default deny incoming
  sudo ufw enable
}


## TOOLS SPECIFICATIONS
configure_gdb() {
  sudo tee /usr/local/bin/gdb-pwndbg > /dev/null << EOF
  #!/bin/sh
  exec gdb -q -ex init-pwndbg "\$@"
EOF

  sudo tee /usr/local/bin/gdb-peda > /dev/null << EOF
  #!/bin/sh
  exec gdb -q -ex init-peda "\$@"
EOF

  sudo tee /usr/local/bin/gdb-gef > /dev/null << EOF
  #!/bin/sh
  exec gdb -q -ex init-gef "\$@"
EOF

  sudo chmod +x /usr/local/bin/gdb-pwndbg /usr/local/bin/gdb-peda /usr/local/bin/gdb-gef
  wget https://raw.githubusercontent.com/FlareXes/dotfiles/main/.gdbinit -O ~/.gdbinit
}

configure_vscode() {
  PJ=$(jq '. + { "extensionsGallery": { "serviceUrl": "https://marketplace.visualstudio.com/_apis/public/gallery", "cacheUrl": "https://vscode.blob.core.windows.net/gallery/index", "itemUrl": "https://marketplace.visualstudio.com/items" } }' /usr/lib/code/product.json)
  echo "$PJ" | sudo tee /usr/lib/code/product.json
}


configure_mpv() {
  mkdir -p ~/.config/mpv/ && touch ~/.config/mpv/mpv.conf
  curl https://raw.githubusercontent.com/FlareXes/dotfiles/main/.config/mpv/mpv.conf >> ~/.config/mpv/mpv.conf

  sudo sed -i "s/thumbnail_width=200/thumbnail_width=300/"        /etc/mpv/script-opts/mpv_thumbnail_script.conf
  sudo sed -i "s/thumbnail_height=200/thumbnail_height=300/"      /etc/mpv/script-opts/mpv_thumbnail_script.conf
  sudo sed -i "s/storyboard_upscale=no/storyboard_upscale=yes/"   /etc/mpv/script-opts/mpv_thumbnail_script.conf
}

update_configs() {
  curl https://raw.githubusercontent.com/FlareXes/dotfiles/main/zshrc >> ~/.zshrc
  curl https://raw.githubusercontent.com/FlareXes/dotfiles/main/sxhkdrc >> ~/.config/bspwm/sxhkdrc

  # Neovim
  git clone https://github.com/NvChad/NvChad ~/.config/nvim --depth 1
  sed -i "s/transparency = false/transparency = true/" ~/.config/nvim/lua/core/default_config.lua
}

miscellaneous() {
  sudo wget https://raw.githubusercontent.com/FlareXes/Micro-Utils/main/systemd-unit/macspoof@.service -O /etc/systemd/system/macspoof@.service
  sudo systemctl enable --now macspoof@wlan0.service

  git clone https://github.com/FlareXes/dotfiles.git $HOME/dotfiles
  cd $HOME/dotfiles && mv ./.scripts $HOME/

  sudo chmod +x /usr/sbin/dumpcap /usr/bin/dumpcap
}

restart_system() {
  mkdir -p ~/.config/arch-hackset && touch ~/.config/arch-hackset/after_restart
  echo "SYSTEM IS ABOUT TO RESTART"
  sleep 10
  reboot
}


if [ ! -f ~/.config/arch-hackset/after_restart ];
then
  # Update System
  sudo pacman -Syyu --noconfirm --disable-download-timeout

  install_basic_packages
  install_github_tools
  install_from_aur
  setup_blackarch_repo
  restart_system

else

  enable_systemd_services
  install_hacking_tools
  install_yay_packages
  install_snap_packages
  configure_gdb
  configure_mpv
  configure_vscode
  update_configs
  miscellaneous

  rm -rf ~/.config/arch-hackset/
fi

exit
